version: "3.7"

services:
  auth:
    build:
      context: ./authorization
      dockerfile: ./Dockerfile
    depends_on:
      - db
    ports:
      - 7001:7001
    networks:
      - app_network

  auth2:
    build:
      context: ./authorization
      dockerfile: ./Dockerfile
    depends_on:
      - db
    ports:
      - 7002:7001
    networks:
      - app_network

  nginx-backend:
    image: nginx:1.19-alpine
    restart: always
    volumes:
      - ./courses:/var/www/courses
      - ./devops/nginx/default.conf:/etc/nginx/templates/default.conf.template
      - ./courses/storage/app/public:/var/www/courses/public/storage
    environment:
      - "PHP_CONTAINER_NAME=host.docker.internal"
      - "RELATIVE_ROOT_PATH=courses/public"
    ports:
      - 80:80
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.rule=((Host(`${DOMAIN}`) || Host(`${DOMAIN_KZ}`) || Host(`${DOMAIN_CRM}`)) && (PathPrefix(`/api`) || PathPrefix(`/crm`) || PathPrefix(`/storage`)))"
#      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.middlewares=${COMPOSE_PROJECT_NAME}-nginx-https-only"
#      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx-secure.rule=((Host(`${DOMAIN}`) || Host(`${DOMAIN_KZ}`) || Host(`${DOMAIN_CRM}`)) && (PathPrefix(`/api`) || PathPrefix(`/crm`) || PathPrefix(`/storage`)))"
#      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx-secure.entrypoints=websecure"
#      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx-secure.tls.certresolver=myresolver"
#      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-nginx-https-only.redirectscheme.scheme=https"
#      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-nginx-https-only.redirectscheme.permanent=true"
    networks:
      - app_network

  php:
    build:
      context: ./devops/php
      args:
        - INI_NAME=php.ini-development
    restart: always
    user: "82:82"
    volumes:
      - ./courses:/var/www/courses
    working_dir: "/var/www/courses"
    networks:
      - app_network
    ports:
      - 9002:9000

  php-surveys:
    build:
      context: ./devops/php
      args:
        - INI_NAME=php.ini-development
    restart: always
    user: "82:82"
    volumes:
      - ./courses:/var/www/surveys
    working_dir: "/var/www/surveys"
    networks:
      - app_network
    ports:
      - 9003:9000

#  php-next:
#    build:
#      context: ./devops/php
#      args:
#        - INI_NAME=php.ini-development
#    restart: always
#    user: "82:82"
#    volumes:
#      - ./courses:/var/www/courses
#    working_dir: "/var/www/courses"
#    networks:
#      - app_network
#    ports:
#      - 9001:9000
#
#  php3:
#    build:
#      context: ./devops/php
#      args:
#        - INI_NAME=php.ini-development
#    restart: always
#    user: "82:82"
#    volumes:
#      - ./courses:/var/www/courses
#    working_dir: "/var/www/courses"
#    networks:
#      - app_network
#    ports:
#      - 9004:9000


  prometheus:
    image: prom/prometheus:v2.24.0
    volumes:
      - ./devops/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    restart: always
    networks:
      - app_network

  db:
    image: "postgres"
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    ports:
      - 5432:5432
    volumes:
      - db_volume:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass $DB_REDIS_PASSWORD
    volumes:
      - cache:/data
    networks:
      - app_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - app_network

volumes:
  db_volume:
  cache:
  prometheus_data:

networks:
  app_network:
    driver: "bridge"